

{% block stylesheets %}




    <!--  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css" /> -->
    <script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"></script>


    <script src='https://api.mapbox.com/mapbox.js/v3.2.0/mapbox.js'></script>
    <link href='https://api.mapbox.com/mapbox.js/v3.2.0/mapbox.css' rel='stylesheet'/>

    <script src='https://api.mapbox.com/mapbox.js/plugins/mapbox-directions.js/v0.4.0/mapbox.directions.js'></script>
    <link rel='stylesheet'
          href='https://api.mapbox.com/mapbox.js/plugins/mapbox-directions.js/v0.4.0/mapbox.directions.css'
          type='text/css'/>

    <script src="https://cdn.jsdelivr.net/npm/graphhopper-js-api-client/dist/graphhopper-client.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.4.1/leaflet.markercluster-src.js"></script>
    <script src="{{ asset('json/recup.js') }}"></script>

    <style>
        .mycluster {
            height: 40px;
            width: 40px;
            border-radius: 50%;
            background-color: #3498db;
            color: white;
            text-align: center;
            font-size: 20px;
            line-height: 40px;
            margin-top: -20px;
            margin-left: -20px;
        }
        .popup-fixed {
            position: fixed;
            top: 300px !important;
            bottom: 0;
            left: 70px !important;
            transform: none !important;
            margin: 0;
            border-radius: 0;
            width: 15%;
        }

        #directions {
            position: absolute;
            width: 33.3333%;
            max-width: 300px;
            min-width: 200px;
        }

        #inputs {
            z-index: 99;
            top: 8px;
            right: 21px;
            /* left: 10px; */
            position: absolute;
        }

        #directions {
            z-index: 99;
            background: rgba(0, 0, 0, .8);
            top: 124px;
            right: 0;
            bottom: 0;
            overflow: auto;
            height: 284px;
            width: 250px;
        }

        #errors {
            z-index: 8;
            opacity: 0;
            padding: 10px;
            border-radius: 0 0 3px 3px;
            background: rgba(0, 0, 0, .25);
            top: 90px;
            left: 10px;
        }







    </style>



    <script>
        window.onload = function () {

            // mise en place de la map
            L.mapbox.accessToken = 'pk.eyJ1IjoiMTY5NTciLCJhIjoiY2pzcHhodDB5MHF4YjQzbzA3dHByb3V2ZiJ9.CiBSDPowlgXwoiRjIlhTKg';
            var map = L.mapbox.map('map')
                .setView([43.6206, 1.5484], 11)
                .addControl(L.mapbox.geocoderControl('mapbox.places', {
                    autocomplete: true
                }))
                .addLayer(L.mapbox.styleLayer('mapbox://styles/mapbox/streets-v11'));

            L.tileLayer( 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
                subdomains: ['a','b','c']
            }).addTo( map );
            // move the attribution control out of the way
            map.attributionControl.setPosition('bottomright');

            var directions = L.mapbox.directions();

            var directionsLayer = L.mapbox.directions.layer(directions)
                .addTo(map);

            var directionsInputControl = L.mapbox.directions.inputControl('inputs', directions)
                .addTo(map);


            var directionsRoutesControl = L.mapbox.directions.routesControl('routes', directions)
                .addTo(map);

            var directionsInstructionsControl = L.mapbox.directions.instructionsControl('instructions', directions)
                .addTo(map);


            var pane = map.createPane('fixed', document.getElementById('map'));



            // ajout de l'image : logo sur le marker
            //  var icon = L.icon({
            //    iconUrl: 'img/verre.png',
            //   iconSize: [45, 40], // size of the icon
            // });


            // Ajout des markers sur la map par rapport au fichier geojson
            geojson = L.geoJson(Verre, {
                style: function (feature) {
                    return feature.properties && feature.properties.style;
                }
            });
            var markerClusters = new L.MarkerClusterGroup({
                iconCreateFunction: function(cluster) {
                    return L.divIcon({
                        html:cluster.getChildCount(),
                        className: 'mycluster',
                        iconSize: null
                    });
                }
            });
            var marker = geojson.getLayers();
            console.log('test');
            for ( var i = 0; i < marker.length; ++i )
            {

                if (marker[i].feature.properties.available == 1 && marker[i].feature.properties.damaged == 0 ){
                    var  myIcon = L.icon({
                        iconUrl: "{{ asset('img/garbage.png') }}"
                    });
                }else if(marker[i].feature.properties.available == 1 && marker[i].feature.properties.damaged == 1) {
                    var  myIcon = L.icon({
                        iconUrl: "{{ asset('/img/damaged.png') }}"
                    });
                }else {
                    var  myIcon = L.icon({
                        iconUrl: "{{ asset('/img/delete.png') }}"
                    });
                }
                //   var marker = L.marker(latlng,{icon:myIcon});



                // Detail du Popup
                if (marker[i].feature.properties.actualCapacity > 1500){
                    var popup = L.popup({
                            pane: 'fixed',
                            className: 'popup-fixed',
                            autoPan: false,
                        }).setContent('<b><u>Description de la benne</u></b><br>'
                        + '<b>Adresse : </b>' + marker[i].feature.properties.adresse + '<br>'
                        + '<b>Commune:</b>' + marker[i].feature.properties.commune + '<br>'
                        + '<b>QRCODE :  </b>' + '<img src="https://qrickit.com/api/qr.php?d=https://www.google.com/maps/place/' + marker[i].feature.properties.adresse + ','
                        + marker[i].feature.properties.zip + ',' + marker[i].feature.properties.commune + '/@' + marker[i].feature.geometry.coordinates[1] + ',' + marker[i].feature.geometry.coordinates[0] + ' "> <br>'
                        + '<b>Capacité : La poubelle est presque pleine</b>' + '<br>'
                        + '<a href="/trash/add_incidents/'+marker[i].feature.properties.id+'">Déclarer un incident</a>')
                    ;

                }else{
                    var popup = L.popup({
                            pane: 'fixed',
                            className: 'popup-fixed',
                            autoPan: false,
                        }).setContent('<b><u>Description de la benne</u></b><br>'
                        + '<b>Adresse : </b>' + marker[i].feature.properties.adresse + '<br>'
                        + '<b>Commune:</b>' + marker[i].feature.properties.commune + '<br>'
                        + '<b>QRCODE :  </b>' + '<img src="https://qrickit.com/api/qr.php?d=https://www.google.com/maps/place/' + marker[i].feature.properties.adresse + ','
                        + marker[i].feature.properties.zip  + ',' + marker[i].feature.properties.commune + '/@' + marker[i].feature.geometry.coordinates[1] + ',' + marker[i].feature.geometry.coordinates[0] + '"> <br>'
                        + '<b>Capacité : La poubelle n\'est pas pleine</b>' + '<br>'
                        + '<a href="/trash/add_incidents/'+marker[i].feature.properties.id+'">Déclarer un incident</a>')
                    ;
                }
                console.log(marker[i]);

                var m = L.marker([marker[i]._latlng.lat, marker[i]._latlng.lng] , {icon: myIcon})
                    .bindPopup(popup)
                ;

                markerClusters.addLayer( m );

            }

            map.addLayer( markerClusters );
            // ajout de la géolocalisation
            map.locate({setMarker: true, watch: true}) /* This will return map so you can do chaining */
                .on('locationfound', function (e) {
                    var circle = L.circle([e.latitude, e.longitude], e.accuracy / 2, {
                        weight: 1,
                        color: '#ffb045',
                        fillColor: '#ff7800',
                        fillOpacity: 0.2
                    });
                    map.addLayer(circle);
                })
                .on('locationerror', function (e) {
                    console.log(e);
                    alert("Location access denied.");
                });


        }
    </script>


{% endblock %}


{% block body %}

    <div class="container">
        <div class="row">
            <div class="col-xl-9 mx-auto">
                <div id="map" style="height: 400px"></div>
            </div>
            <div class="col-xl-3">
                <div id='inputs'></div>
                <div id="calcul">
                    <div id='directions'>
                        <div id='routes'></div>
                        <div id='instructions'></div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    {% block javascripts %}

    {% endblock %}


{% endblock %}


