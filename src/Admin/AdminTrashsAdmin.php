<?php
/**
 * Created by PhpStorm.
 * User: joffrey
 * Date: 2019-03-11
 * Time: 14:34
 */

namespace App\Admin;


use App\Entity\Trashs;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\TextType;

class AdminTrashsAdmin extends AbstractAdmin
{
    protected function configureFormFields(FormMapper $formMapper)
    {
        $user = $this->getConfigurationPool()->getContainer()->get('security.token_storage')->getToken()->getUser();




        $formMapper->add('city', TextType::class, [
            'label' => 'Ville'

        ]);
        $formMapper->add('address', TextType::class, [
            'label' => 'Adresse'
        ]);
        $formMapper->add('reference', TextType::class, [
            'label' => 'Référence'
        ]);
        $formMapper->add('capacityMax', TextType::class, [
            'label' => 'Capacité maximum'
        ]);

    }

    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper->addIdentifier('reference');
        $listMapper->add('address');

    }

    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper->add('city');
        $datagridMapper->add('address');
        $datagridMapper->add('inseeCode');
        $datagridMapper->add('latitude');
        $datagridMapper->add('longitude');
        $datagridMapper->add('altitude');
        $datagridMapper->add('reference');
        $datagridMapper->add('capacityMax');
        $datagridMapper->add('actualCapacity');
    }

    public function toString($object)
    {
        return $object instanceof Trashs
            ? $object->getReference()
            : 'Trash';
    }

    public function prePersist($object)
    {
        parent::prePersist($object); // TODO: Change the autogenerated stub
        $city = $object->getCity();
        $address = $object->getAddress();

        $inseeUrl = 'https://geo.api.gouv.fr/communes?nom=' . $city . '&fields=departement';
        $file = file_get_contents($inseeUrl);
        $json = json_decode($file, true);
        $code = $json[0]['code'];

        $opts = array('http'=>array('header'=>"User-Agent: StevesCleverAddressScript 3.7.6\r\n"));
        $context = stream_context_create($opts);
        $url = 'https://nominatim.openstreetmap.org/search.php?q=' . rawurlencode($city) . '%20' . rawurlencode($address) . '&format=json';
        $file = file_get_contents($url, false, $context);
        $json = json_decode($file, true);
        $lat = $json[0]['lat'];
        $lon = $json[0]['lon'];
        $token = '4TozhmTJ9jLsEVJRLrWHXF50V0xqSvy8OgXCfVJ6p0mZrEY6Ts6iU5Sear5w3gHq';
        $urlElevation = 'https://api.jawg.io/elevations?locations=' . $lat . ',' . $lon . '&access-token=' . $token;
        $fileElevation = file_get_contents($urlElevation, false, $context);
        $jsonElevation = json_decode($fileElevation, true);
        $elevation = $jsonElevation[0]['elevation'];
        $object->setLatitude($lat);
        $object->setLongitude($lon);
        $object->setAltitude($elevation);
        $object->setinseeCode($code);
    }
}